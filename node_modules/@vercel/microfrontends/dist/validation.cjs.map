{"version":3,"sources":["../src/schema/validation.ts","../src/config/microfrontends/server/validation.ts","../src/config/errors.ts","../schema/schema.json","../src/config/schema/utils/load.ts"],"sourcesContent":["export { validateSchema } from '../config/microfrontends/server/validation';\n","import { parse } from 'jsonc-parser';\nimport { Ajv, type ErrorObject } from 'ajv';\nimport type { Config } from '../../schema/types';\nimport { MicrofrontendError } from '../../errors';\nimport { SCHEMA } from '../../schema/utils/load';\n\nconst LIST_FORMATTER = new Intl.ListFormat('en', {\n  style: 'long',\n  type: 'disjunction',\n});\n\nfunction formatAjvErrors(errors: ErrorObject[] | null | undefined): string[] {\n  if (!errors) {\n    return [];\n  }\n  const errorMessages: string[] = [];\n  for (const error of errors) {\n    // Ignore root errors that arise because AJV can't infer whether the config is a main config or a child config.\n    // These errors are confusing for the user.\n    if (\n      error.instancePath === '' &&\n      (error.keyword === 'anyOf' ||\n        (error.keyword === 'required' &&\n          error.params.missingProperty === 'partOf'))\n    ) {\n      continue;\n    }\n\n    // Ignore the first leading slash in the instance path to make the path more readable.\n    const instancePath = error.instancePath.slice(1);\n    const formattedInstancePath =\n      instancePath === '' ? 'at the root' : `in field ${instancePath}`;\n\n    // AJV errors are really cryptic, so this logic transforms them to nicer ones.\n    // It is based on heuristics from introducing errors and observing what AJV produces.\n    if (\n      error.keyword === 'required' &&\n      error.params.missingProperty === 'routing' &&\n      instancePath.split('/').length === 2\n    ) {\n      errorMessages.push(\n        `Unable to infer if ${instancePath} is the default app or a child app. This usually means that there is another error in the configuration.`,\n      );\n    } else if (\n      error.keyword === 'anyOf' &&\n      instancePath.split('/').length > 2\n    ) {\n      const anyOfErrors = errors.filter(\n        (e) => e.instancePath === error.instancePath && e.keyword !== 'anyOf',\n      );\n      if (anyOfErrors.every((e) => e.keyword === 'type')) {\n        const allowedTypes = LIST_FORMATTER.format(\n          anyOfErrors.map((e) => {\n            return e.keyword === 'type' ? String(e.params.type) : 'unknown';\n          }),\n        );\n        errorMessages.push(\n          `Incorrect type for ${instancePath}. Must be one of ${allowedTypes}`,\n        );\n      } else {\n        errorMessages.push(\n          `Invalid field for ${instancePath}. Possible error messages are ${LIST_FORMATTER.format(anyOfErrors.map((e) => e.message ?? ''))}`,\n        );\n      }\n    } else if (\n      error.keyword === 'additionalProperties' &&\n      !(\n        error.params.additionalProperty === 'routing' &&\n        instancePath.split('/').length === 2\n      )\n    ) {\n      errorMessages.push(\n        `Property '${error.params.additionalProperty}' is not allowed ${formattedInstancePath}`,\n      );\n    } else if (error.keyword === 'required') {\n      errorMessages.push(\n        `Property '${error.params.missingProperty}' is required ${formattedInstancePath}`,\n      );\n    }\n  }\n  return errorMessages;\n}\n\nexport function validateSchema(configString: string): Config {\n  const parsedConfig = parse(configString) as Config;\n\n  const ajv = new Ajv({ allowUnionTypes: true });\n  const validate = ajv.compile(SCHEMA);\n  const isValid = validate(parsedConfig);\n  if (!isValid) {\n    throw new MicrofrontendError(\n      `Invalid microfrontends config:${formatAjvErrors(validate.errors)\n        .map((error) => `\\n - ${error}`)\n        .join(\n          '',\n        )}\\n\\nSee https://openapi.vercel.sh/microfrontends.json for the schema.`,\n      { type: 'config', subtype: 'does_not_match_schema' },\n    );\n  }\n\n  return parsedConfig;\n}\n","export type MicrofrontendErrorType =\n  | 'config'\n  | 'packageJson'\n  | 'vercelJson'\n  | 'application'\n  | 'unknown';\n\nexport type MicrofrontendErrorSubtype =\n  | 'not_found'\n  | 'inference_failed'\n  | 'not_found_in_env'\n  | 'invalid_asset_prefix'\n  | 'invalid_main_path'\n  | 'does_not_match_schema'\n  | 'unable_to_read_file'\n  | 'unsupported_validation_env'\n  | 'unsupported_version'\n  | 'invalid_path'\n  | 'invalid_permissions'\n  | 'invalid_syntax'\n  | 'missing_microfrontend_config_path'\n  | 'unsupported_operation';\n\n// A mapping of error types to their subtypes.\ninterface TypeToSubtype {\n  application:\n    | 'invalid_asset_prefix'\n    | 'invalid_path'\n    | 'multiple_package_managers'\n    | 'not_found';\n  config:\n    | 'conflicting_paths'\n    | 'depcrecated_field'\n    | 'does_not_match_schema'\n    | 'invalid_main_path'\n    | 'invalid_preview_deployment_suffix'\n    | 'multiple_default_applications'\n    | 'no_default_application'\n    | 'not_found_in_env'\n    | 'not_found'\n    | 'inference_failed'\n    | 'unable_to_read_file'\n    | 'invalid_syntax'\n    | 'invalid_permissions'\n    | 'unsupported_operation'\n    | 'unsupported_validation_env'\n    | 'unsupported_version';\n  packageJson:\n    | 'missing_field_name'\n    | 'unable_to_read_file'\n    | 'invalid_permissions'\n    | 'invalid_syntax';\n  vercelJson:\n    | 'missing_field_microfrontend_config_path'\n    | 'unable_to_read_file'\n    | 'invalid_permissions'\n    | 'invalid_syntax';\n  unknown: never;\n}\n\nexport type MicrofrontendErrorSource =\n  | '@vercel/microfrontends'\n  | '@vercel/microfrontends/next'\n  | 'fs'\n  | 'ajv';\n\nexport interface MicrofrontendErrorOptions<T extends MicrofrontendErrorType> {\n  cause?: unknown;\n  source?: MicrofrontendErrorSource;\n  type?: T;\n  subtype?: TypeToSubtype[T];\n}\n\ninterface HandleOptions {\n  fileName?: string;\n}\n\nexport class MicrofrontendError<\n  T extends MicrofrontendErrorType = 'unknown',\n> extends Error {\n  public source: MicrofrontendErrorSource;\n  public type: T;\n  public subtype?: TypeToSubtype[T];\n\n  constructor(message: string, opts?: MicrofrontendErrorOptions<T>) {\n    super(message, { cause: opts?.cause });\n    this.name = 'MicrofrontendsError';\n    this.source = opts?.source ?? '@vercel/microfrontends';\n    this.type = opts?.type ?? ('unknown' as T);\n    this.subtype = opts?.subtype;\n    Error.captureStackTrace(this, MicrofrontendError);\n  }\n\n  isKnown(): boolean {\n    return this.type !== 'unknown';\n  }\n\n  isUnknown(): boolean {\n    return !this.isKnown();\n  }\n\n  /**\n   * Converts an error to a MicrofrontendsError.\n   * @param original - The original error to convert.\n   * @returns The converted MicrofrontendsError.\n   */\n  static convert(\n    original: Error,\n    opts?: HandleOptions,\n  ): MicrofrontendError<MicrofrontendErrorType> {\n    if (opts?.fileName) {\n      const err = MicrofrontendError.convertFSError(original, opts.fileName);\n      if (err) {\n        return err;\n      }\n    }\n\n    if (\n      original.message.includes(\n        'Code generation from strings disallowed for this context',\n      )\n    ) {\n      return new MicrofrontendError(original.message, {\n        type: 'config',\n        subtype: 'unsupported_validation_env',\n        source: 'ajv',\n      });\n    }\n\n    // unknown catch-all\n    return new MicrofrontendError(original.message);\n  }\n\n  static convertFSError(\n    original: Error,\n    fileName: string,\n  ): MicrofrontendError<MicrofrontendErrorType> | null {\n    if (original instanceof Error && 'code' in original) {\n      if (original.code === 'ENOENT') {\n        return new MicrofrontendError(`Could not find \"${fileName}\"`, {\n          type: 'config',\n          subtype: 'unable_to_read_file',\n          source: 'fs',\n        });\n      }\n      if (original.code === 'EACCES') {\n        return new MicrofrontendError(\n          `Permission denied while accessing \"${fileName}\"`,\n          {\n            type: 'config',\n            subtype: 'invalid_permissions',\n            source: 'fs',\n          },\n        );\n      }\n    }\n\n    if (original instanceof SyntaxError) {\n      return new MicrofrontendError(\n        `Failed to parse \"${fileName}\": Invalid JSON format.`,\n        {\n          type: 'config',\n          subtype: 'invalid_syntax',\n          source: 'fs',\n        },\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * Handles an unknown error and returns a MicrofrontendsError instance.\n   * @param err - The error to handle.\n   * @returns A MicrofrontendsError instance.\n   */\n  static handle(\n    err: unknown,\n    opts?: HandleOptions,\n  ): MicrofrontendError<MicrofrontendErrorType> {\n    if (err instanceof MicrofrontendError) {\n      return err as MicrofrontendError<MicrofrontendErrorType>;\n    }\n\n    // handle Error instances\n    if (err instanceof Error) {\n      return MicrofrontendError.convert(err, opts);\n    }\n\n    // handle object errors\n    if (typeof err === 'object' && err !== null) {\n      if ('message' in err && typeof err.message === 'string') {\n        return MicrofrontendError.convert(new Error(err.message), opts);\n      }\n    }\n\n    return new MicrofrontendError('An unknown error occurred');\n  }\n}\n","{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$ref\": \"#/definitions/Config\",\n  \"definitions\": {\n    \"Config\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"$schema\": {\n          \"type\": \"string\"\n        },\n        \"version\": {\n          \"type\": \"string\",\n          \"const\": \"1\"\n        },\n        \"options\": {\n          \"$ref\": \"#/definitions/Options\"\n        },\n        \"applications\": {\n          \"$ref\": \"#/definitions/ApplicationRouting\",\n          \"description\": \"Mapping of application names to the routes that they host. Only needs to be defined in the application that owns the primary microfrontend domain\"\n        }\n      },\n      \"required\": [\"applications\"],\n      \"additionalProperties\": false\n    },\n    \"Options\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"disableOverrides\": {\n          \"type\": \"boolean\",\n          \"description\": \"If you want to disable the overrides for the site. For example, if you are managing rewrites between applications externally, you may wish to disable the overrides on the toolbar as they will have no effect.\"\n        },\n        \"localProxyPort\": {\n          \"type\": \"number\",\n          \"description\": \"The port number used by the local proxy server.\\n\\nThe default is `3024`.\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"ApplicationRouting\": {\n      \"type\": \"object\",\n      \"additionalProperties\": {\n        \"$ref\": \"#/definitions/Application\"\n      },\n      \"propertyNames\": {\n        \"description\": \"The unique identifier for a Microfrontend Application.\\n\\nMust match the Vercel project name.\\n\\nNote: If this name does not also match the name used to run the application, (e.g. the `name` from the `package.json`), then the `packageName` field should be set.\"\n      }\n    },\n    \"Application\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/DefaultApplication\"\n        },\n        {\n          \"$ref\": \"#/definitions/ChildApplication\"\n        }\n      ]\n    },\n    \"DefaultApplication\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"projectId\": {\n          \"type\": \"string\",\n          \"description\": \"Vercel project ID, only required if the application name / id is different to the Vercel project name.\",\n          \"deprecated\": \"Instead, the application id should match the Vercel project name. `packageName` can optionally\\nbe set to the name of the package.json (if it is different from the project name).\"\n        },\n        \"packageName\": {\n          \"type\": \"string\",\n          \"description\": \"The name used to run the application, e.g. the `name` field in the `package.json`.\\n\\nThis is used by the local proxy to map the application config to the locally running app.\\n\\nThis is only necessary when the application name does not match the `name` used in `package.json`.\"\n        },\n        \"development\": {\n          \"$ref\": \"#/definitions/DefaultDevelopment\",\n          \"description\": \"Development configuration for the default application.\"\n        }\n      },\n      \"required\": [\"development\"],\n      \"additionalProperties\": false\n    },\n    \"DefaultDevelopment\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"local\": {\n          \"type\": [\"number\", \"string\"],\n          \"description\": \"A local port number or host string that this application runs on when it is running locally. If passing a string, include the protocol (optional), host (required) and port (optional). For example: `https://this.ismyhost:8080`. If omitted, the protocol defaults to HTTP. If omitted, the port defaults to a unique, but stable (based on the application name) number.\\n\\nExamples of valid values:\\n- 8080\\n- my.localhost.me\\n- my.localhost.me:8080\\n- https://my.localhost.me\\n- https://my.localhost.me:8080\"\n        },\n        \"localPort\": {\n          \"type\": \"number\",\n          \"description\": \"The local port number that this application runs on when it is running locally. Common values include `80` for HTTP and `443` for HTTPS. If omitted, the port defaults to a unique, but stable (based on the application name) number.\",\n          \"deprecated\": \"Please set the port with the 'local' field instead.\"\n        },\n        \"task\": {\n          \"type\": \"string\",\n          \"description\": \"Optional task to run when starting the development server. Should reference a script in the package.json of the application.\"\n        },\n        \"fallback\": {\n          \"type\": \"string\",\n          \"description\": \"Fallback for local development, could point to any environment. This is required for the default app. This value is used as the fallback for child apps as well if they do not have a fallback.\\n\\nIf passing a string, include the protocol (optional), host (required) and port (optional). For example: `https://this.ismyhost:8080`. If omitted, the protocol defaults to HTTPS. If omitted, the port defaults to `80` for HTTP and `443` for HTTPS.\"\n        }\n      },\n      \"required\": [\"fallback\"],\n      \"additionalProperties\": false\n    },\n    \"ChildApplication\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"projectId\": {\n          \"type\": \"string\",\n          \"description\": \"Vercel project ID, only required if the application name / id is different to the Vercel project name.\",\n          \"deprecated\": \"Instead, the application id should match the Vercel project name. `packageName` can optionally\\nbe set to the name of the package.json (if it is different from the project name).\"\n        },\n        \"packageName\": {\n          \"type\": \"string\",\n          \"description\": \"The name used to run the application, e.g. the `name` field in the `package.json`.\\n\\nThis is used by the local proxy to map the application config to the locally running app.\\n\\nThis is only necessary when the application name does not match the `name` used in `package.json`.\"\n        },\n        \"development\": {\n          \"$ref\": \"#/definitions/ChildDevelopment\",\n          \"description\": \"Development configuration for the child application.\"\n        },\n        \"routing\": {\n          \"$ref\": \"#/definitions/Routing\",\n          \"description\": \"Groups of path expressions that are routed to this application.\"\n        }\n      },\n      \"required\": [\"routing\"],\n      \"additionalProperties\": false\n    },\n    \"ChildDevelopment\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"local\": {\n          \"type\": [\"number\", \"string\"],\n          \"description\": \"A local port number or host string that this application runs on when it is running locally. If passing a string, include the protocol (optional), host (required) and port (optional). For example: `https://this.ismyhost:8080`. If omitted, the protocol defaults to HTTP. If omitted, the port defaults to a unique, but stable (based on the application name) number.\\n\\nExamples of valid values:\\n- 8080\\n- my.localhost.me\\n- my.localhost.me:8080\\n- https://my.localhost.me\\n- https://my.localhost.me:8080\"\n        },\n        \"localPort\": {\n          \"type\": \"number\",\n          \"description\": \"The local port number that this application runs on when it is running locally. Common values include `80` for HTTP and `443` for HTTPS. If omitted, the port defaults to a unique, but stable (based on the application name) number.\",\n          \"deprecated\": \"Please set the port with the 'local' field instead.\"\n        },\n        \"task\": {\n          \"type\": \"string\",\n          \"description\": \"Optional task to run when starting the development server. Should reference a script in the package.json of the application.\"\n        },\n        \"fallback\": {\n          \"type\": \"string\",\n          \"description\": \"Fallback for local development, could point to any environment. This is optional for child apps. If not provided, the fallback of the default app will be used.\\n\\nIf passing a string, include the protocol (optional), host (required) and port (optional). For example: `https://this.ismyhost:8080`. If omitted, the protocol defaults to HTTPS. If omitted, the port defaults to `80` for HTTP and `443` for HTTPS.\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Routing\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/PathGroup\"\n      }\n    },\n    \"PathGroup\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"group\": {\n          \"type\": \"string\",\n          \"description\": \"Optional group name for the paths\"\n        },\n        \"flag\": {\n          \"type\": \"string\",\n          \"description\": \"flag name that can be used to enable/disable all paths in the group\"\n        },\n        \"paths\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"required\": [\"paths\"],\n      \"additionalProperties\": false\n    }\n  }\n}\n","import type { JSONSchema7 } from 'json-schema';\nimport jsonSchema from '../../../../schema/schema.json';\n\nexport const SCHEMA = jsonSchema as JSONSchema7;\n"],"mappings":"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","names":[]}