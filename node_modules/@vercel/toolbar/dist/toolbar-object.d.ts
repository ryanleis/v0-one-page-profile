interface ServerEvents {
    'branch-change': string | undefined;
}

declare const vercelToolbarWindowKey = "__vercel_toolbar";
interface LocalhostEventSource {
    subscribe: <K extends keyof ServerEvents>(type: K, callback: (payload: ServerEvents[K]) => void) => () => void;
    fetchLocal: <T = Record<string, unknown>, U = Record<string, unknown>>(path: string, body?: U) => Promise<{
        result: T;
    } | {
        error: string;
    }>;
}
interface BaseVercelToolbar {
    unmount: () => void;
    isAuthenticated: false;
}
interface AuthenticatedVercelToolbar extends Omit<BaseVercelToolbar, 'isAuthenticated'> {
    isAuthenticated: true;
    setLocalhostEventSource?: (eventSource: LocalhostEventSource) => void;
}
declare type VercelToolbar = BaseVercelToolbar | AuthenticatedVercelToolbar;
declare global {
    interface Window {
        [vercelToolbarWindowKey]?: VercelToolbar;
    }
}
declare function getVercelToolbarObject(): VercelToolbar | undefined;

export { AuthenticatedVercelToolbar, BaseVercelToolbar, LocalhostEventSource, VercelToolbar, getVercelToolbarObject, vercelToolbarWindowKey };
