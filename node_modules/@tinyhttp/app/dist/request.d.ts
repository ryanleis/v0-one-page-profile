/// <reference types="node" />
import { IncomingMessage } from 'http';
import { ParsedUrlQuery } from 'querystring';
import { Ranges } from 'range-parser';
import { App } from './app';
import type { Middleware, Handler } from '@tinyhttp/router';
import type { Response } from './response';
import type { URLParams } from '@tinyhttp/req';
export { getURLParams } from '@tinyhttp/req';
export declare const getRouteFromApp: ({ middleware }: App, h: Handler<Request, Response>) => Middleware<Request, Response<any>>;
export declare const getProtocol: (req: Request) => Protocol;
export declare const getHostname: (req: Request) => string | undefined;
export declare const getIP: (req: Pick<IncomingMessage, 'headers' | 'connection'>) => string | undefined;
export declare const getIPs: (req: Pick<IncomingMessage, 'headers' | 'connection'>) => string[] | undefined;
export declare const getSubdomains: (req: Request, subdomainOffset?: number) => string[];
export declare type Connection = IncomingMessage['socket'] & {
    encrypted: boolean;
};
export declare type Protocol = 'http' | 'https' | string;
export type { URLParams };
declare type AcceptsReturns = string | false | string[];
export interface Request extends IncomingMessage {
    originalUrl: string;
    path: string;
    url: string;
    query: ParsedUrlQuery;
    params?: URLParams;
    connection: Connection;
    route?: Middleware | undefined;
    protocol: Protocol;
    secure: boolean;
    xhr: boolean;
    hostname: string | undefined;
    ip?: string;
    ips?: string[];
    subdomains?: string[];
    get: (header: string) => string | string[] | undefined;
    range: (size: number, options?: any) => -1 | -2 | Ranges | undefined;
    accepts: (...types: string[]) => AcceptsReturns;
    acceptsEncodings: (...encodings: string[]) => AcceptsReturns;
    acceptsCharsets: (...charsets: string[]) => AcceptsReturns;
    acceptsLanguages: (...languages: string[]) => AcceptsReturns;
    is: (...types: string[]) => boolean;
    cookies?: any;
    signedCookies?: any;
    secret?: string | string[];
    fresh?: boolean;
    stale?: boolean;
    body?: any;
    app?: App;
}
