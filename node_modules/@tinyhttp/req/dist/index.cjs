'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var parseRange = require('range-parser');
var fresh = require('es-fresh');
var typeIs = require('@tinyhttp/type-is');
var accepts = require('@tinyhttp/accepts');
var url = require('@tinyhttp/url');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var parseRange__default = /*#__PURE__*/_interopDefaultLegacy(parseRange);
var fresh__default = /*#__PURE__*/_interopDefaultLegacy(fresh);

const getAccepts = (req) => (...types) => new accepts.Accepts(req).types(types);
const getAcceptsEncodings = (req) => (...encodings) => new accepts.Accepts(req).encodings(encodings);
const getAcceptsCharsets = (req) => (...charsets) => new accepts.Accepts(req).charsets(charsets);
const getAcceptsLanguages = (req) => (...languages) => new accepts.Accepts(req).languages(languages);

const getRequestHeader = (req) => (header) => {
    const lc = header.toLowerCase();
    switch (lc) {
        case 'referer':
        case 'referrer':
            return req.headers.referrer || req.headers.referer;
        default:
            return req.headers[lc];
    }
};
const getRangeFromHeader = (req) => (size, options) => {
    const range = getRequestHeader(req)('Range');
    if (!range)
        return;
    return parseRange__default['default'](size, range, options);
};
const getFreshOrStale = (req, res) => {
    const method = req.method;
    const status = res.statusCode;
    // GET or HEAD for weak freshness validation only
    if (method !== 'GET' && method !== 'HEAD')
        return false;
    // 2xx or 304 as per rfc2616 14.26
    if ((status >= 200 && status < 300) || status === 304) {
        return fresh__default['default'](req.headers, {
            etag: res.getHeader('ETag'),
            'last-modified': res.getHeader('Last-Modified')
        });
    }
    return false;
};
const checkIfXMLHttpRequest = (req) => req.headers['X-Requested-With'] === 'XMLHttpRequest';
const reqIs = (req) => (...types) => typeIs.typeIs(req.headers['content-type'], ...types);

exports.checkIfXMLHttpRequest = checkIfXMLHttpRequest;
exports.getAccepts = getAccepts;
exports.getAcceptsCharsets = getAcceptsCharsets;
exports.getAcceptsEncodings = getAcceptsEncodings;
exports.getAcceptsLanguages = getAcceptsLanguages;
exports.getFreshOrStale = getFreshOrStale;
exports.getRangeFromHeader = getRangeFromHeader;
exports.getRequestHeader = getRequestHeader;
exports.reqIs = reqIs;
Object.keys(url).forEach(function (k) {
    if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
        enumerable: true,
        get: function () {
            return url[k];
        }
    });
});
