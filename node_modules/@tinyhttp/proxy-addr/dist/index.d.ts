/// <reference types="node" />
import { IncomingMessage } from 'http';
import ipaddr from 'ipaddr.js';
/**
 * Get all addresses in the request, optionally stopping
 * at the first untrusted.
 *
 * @param request
 * @param trust
 */
declare function alladdrs(req: Pick<IncomingMessage, 'headers' | 'connection'>, trust: ((...args: any[]) => any) | any[] | string[] | string): string[];
/**
 * Compile argument into trust function.
 *
 * @param  val
 */
declare function compile(val: string | string[] | number[]): (addr: string) => boolean;
/**
 * Parse IP notation string into range subnet.
 *
 * @param {String} note
 * @private
 */
export declare function parseIPNotation(note: string): (string | number | ipaddr.IPv4 | ipaddr.IPv6)[];
/**
 * Determine address of proxied request.
 *
 * @param request
 * @param trust
 * @public
 */
export declare function proxyaddr(req: Pick<IncomingMessage, 'headers' | 'connection'>, trust: ((...args: any[]) => any) | any[] | string[] | string): string;
export { alladdrs as all };
export { compile };
